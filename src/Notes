Identifying Boundaries:

    Getting it wrong can be costly
    - poor performance
    - hard to change

    Start from an existing system
    - identify loosely coupled components
    - identify data seams

    - Domain Driven Design
        - identify up larges domains
        - microservices do not share models

Building Microservices

    *HOSTING OPTIONS
        -Virtual Machines
        -Platform as a Service
        -Containers
            -install dependencies
            -set up configurations
            -automate developer process

    *SOURCE CONTROL REPOSITORY
        -avoid tight coupling

    AUTOMATED TESTS
        - unit tests - fast to run, high code coverage
        - service-level tests - single service isolation, mock collaborators
        - end-to-end level - production like environment

    Standardizing Microservices
        - logging
        - health checks
        - configuration
        - authentification
        - build scripts

    Benefits of Service Templates
        -reduce time
        -consistent tooling
        -increased developer productivity
        -ability to run in isolation
        -run in full context of app

    COMMUNICATION BETWEEN MICROSERVICES
        -


